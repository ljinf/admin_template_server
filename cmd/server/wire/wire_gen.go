// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"github.com/spf13/viper"
	"poem_server_admin/internal/cache"
	"poem_server_admin/internal/handler"
	handler2 "poem_server_admin/internal/handler/sys"
	"poem_server_admin/internal/repository"
	"poem_server_admin/internal/repository/sys"
	"poem_server_admin/internal/server"
	"poem_server_admin/internal/service"
	service2 "poem_server_admin/internal/service/sys"
	"poem_server_admin/pkg/app"
	"poem_server_admin/pkg/jwt"
	"poem_server_admin/pkg/log"
	"poem_server_admin/pkg/server/http"
	"poem_server_admin/pkg/sid"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, logger *log.Logger) (*app.App, func(), error) {
	jwtJWT := jwt.NewJwt(viperViper)
	handlerHandler := handler.NewHandler(logger)
	db := repository.NewDB(viperViper, logger)
	client := repository.NewRedis(viperViper)
	repositoryRepository := repository.NewRepository(logger, db, client)
	transaction := repository.NewTransaction(repositoryRepository)
	sidSid := sid.NewSid()
	serviceService := service.NewService(transaction, logger, sidSid, jwtJWT)
	userRepository := sys.NewUserRepository(repositoryRepository)
	accountCache := cache.NewAccountCache(client)
	userService := service2.NewUserService(serviceService, userRepository, accountCache)
	roleRepository := sys.NewRoleRepository(repositoryRepository)
	roleService := service2.NewRoleService(serviceService, roleRepository)
	menuRepository := sys.NewMenuRepository(repositoryRepository)
	menuService := service2.NewMenuService(serviceService, menuRepository)
	accountHandler := handler2.NewAccountHandler(handlerHandler, userService, roleService, menuService)
	userHandler := handler2.NewUserHandler(handlerHandler, userService, roleService)
	menuHandler := handler2.NewMenuHandler(handlerHandler, menuService)
	dictRepository := sys.NewDictRepository(repositoryRepository)
	dictService := service2.NewDictService(serviceService, dictRepository)
	dictHandler := handler2.NewDictHandler(handlerHandler, dictService)
	roleHandler := handler2.NewRoleHandler(handlerHandler, roleService)
	httpServer := server.NewHTTPServer(logger, viperViper, jwtJWT, accountHandler, accountCache, userHandler, menuHandler, dictHandler, roleHandler)
	appApp := newApp(httpServer)
	return appApp, func() {
	}, nil
}

// wire.go:

var repositorySet = wire.NewSet(repository.NewDB, repository.NewRedis, repository.NewRepository, repository.NewTransaction, sys.NewDictRepository, sys.NewUserRepository, sys.NewMenuRepository, sys.NewRoleRepository)

var serviceSet = wire.NewSet(service.NewService, service2.NewUserService, service2.NewMenuService, service2.NewRoleService, service2.NewDictService)

var handlerSet = wire.NewSet(handler.NewHandler, handler2.NewAccountHandler, handler2.NewDictHandler, handler2.NewMenuHandler, handler2.NewRoleHandler, handler2.NewUserHandler)

var serverSet = wire.NewSet(server.NewHTTPServer)

var cacheSet = wire.NewSet(cache.NewAccountCache)

// build App
func newApp(
	httpServer *http.Server,

) *app.App {
	return app.NewApp(app.WithServer(httpServer), app.WithName("poem-admin-server"))
}
